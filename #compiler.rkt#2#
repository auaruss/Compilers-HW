#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.5 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 91 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 158 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 211 72 255 0 0 0 -1 -1 2
35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 211 72 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 150 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 0
1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 102 102 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 249 148 40 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 51 174 51 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 60 194 57 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 69 43 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 163 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 192 203
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 166 0 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 205 50 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 240 230 140
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1           0 2640 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 10 #"racket/set"
0 0 24 3 1 #" "
0 0 14 3 13 #"racket/stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 13 #"racket/fixnum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"interp-R0.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"interp-R1.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"interp.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"utilities.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(4
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #";; R0 examples"
0 0 24 29 1 #"\n"
0 0 17 3 79 4 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(5
 #";; The following compiler pass is just a silly one that doesn't chan"
 #"ge"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#";; anything important, but is nevertheless an example of a pass. It"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; flips the arguments of +. -Jeremy"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flip-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"())]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flip-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flip-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 14 3 8 #"flip-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flip-R0"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flip-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; Next we have the partial evaluation pass described in the bzook."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"pe-neg"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Int"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fx-"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"pe-add"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"match*"
0 0 24 3 2 #" ("
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [(("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"Int"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fx+"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"pe-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"())]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"pe-neg"
0 0 24 3 2 #" ("
0 0 14 3 6 #"pe-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"pe-add"
0 0 24 3 2 #" ("
0 0 14 3 6 #"pe-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"pe-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pe-R0"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 2 #" ("
0 0 14 3 6 #"pe-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"test-pe"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"testing pe-R0\""
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interp-R0"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interp-R0"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pe-R0"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"test-pe"
0 0 24 3 2 #" ("
0 0 14 3 13 #"parse-program"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"test-pe"
0 0 24 3 2 #" ("
0 0 14 3 13 #"parse-program"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"test-pe"
0 0 24 3 2 #" ("
0 0 14 3 13 #"parse-program"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79 4 0 0 24 29 1 #"\n"
0 0 17 3 13 #";; HW1 Passes"
0 0 24 29 1 #"\n"
0 0 17 3 79 4 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"uniquify-exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 6 #"symtab"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"Var"
0 0 24 3 2 #" ("
0 0 14 3 19 #"symbol-table-lookup"
0 0 24 3 1 #" "
0 0 14 3 6 #"symtab"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"new-x"
0 0 24 3 1 #" "
0 0 17 3 9 #";: Symbol"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"gensym"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")]) "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-x"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 12 #"uniquify-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"symtab"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 12 #"uniquify-exp"
0 0 24 3 2 #" ("
0 0 14 3 19 #"extend-symbol-table"
0 0 24 3 1 #" "
0 0 14 3 6 #"symtab"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-x"
0 0 24 3 3 #")) "
0 0 14 3 4 #"body"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 5 #"]) (("
0 0 14 3 12 #"uniquify-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"symtab"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 8 #")))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"init-symbol-table"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"init"
0 0 24 3 1 #" "
0 0 17 3 47 #";: (Immutable-HashTable Symbol (Listof Symbol))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 19 #"make-immutable-hash"
0 0 24 3 4 #")]) "
0 0 14 3 4 #"init"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"symbol-table-lookup"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 6 #"symtab"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dict-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"variable not in scope\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dict-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"extend-symbol-table"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 6 #"symtab"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"dict-set"
0 0 24 3 1 #" "
0 0 14 3 6 #"symtab"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 9 #"not-found"
0 0 24 3 1 #" "
0 0 17 3 24 #";: (\342\206\222 (Listof Symbol))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 2 #"\316\273"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-x"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dict-ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"symtab"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 9 #"not-found"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; uniquify : R1 -> R1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 3 #" (("
0 0 14 3 12 #"uniquify-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; remove-complex-opera* : R1 -> R1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"remove-complex-opera*"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"TODO: code goes here (remove-complex-opera*)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";; Sam"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; explicate-tail : R1 -> C0Tail x [Var]"
0 0 24 29 1 #"\n"
0 0 17 3 77
(6
 #"; takes in R1 expression and produces C0 Tail and list of let-bound "
 #"variables"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"explicate-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"r1exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"r1exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Return"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"())]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Return"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"())]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Return"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"())]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Return"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())] "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Return"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"())]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 6 #"c0tail"
0 0 24 3 1 #" "
0 0 14 3 9 #"let-binds"
0 0 24 3 3 #") ("
0 0 14 3 14 #"explicate-tail"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 7 #"c0tail^"
0 0 24 3 1 #" "
0 0 14 3 10 #"let-binds^"
0 0 24 3 3 #") ("
0 0 14 3 16 #"explicate-assign"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 6 #"c0tail"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 7 #"c0tail^"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"let-binds"
0 0 24 3 1 #" "
0 0 14 3 10 #"let-binds^"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; explicate-assign : R1 Var C0Tail -> C0Tail x [Var]"
0 0 24 29 1 #"\n"
0 0 17 3 89
(7
 #"; takes in R1 expression, the variable where it will be assigned, an"
 #"d a C0Tail that comes"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#"; after the assignment. Returns a C0Tail and list of variables"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"explicate-assign"
0 0 24 3 1 #" "
0 0 14 3 5 #"r1exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"r1exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Seq"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Assign"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")) "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"())]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Seq"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Assign"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())) "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"())]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Seq"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Assign"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #"))) "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())] "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Seq"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Assign"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #"))) "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())] "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Seq"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Assign"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"())]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 6 #"c0tail"
0 0 24 3 1 #" "
0 0 14 3 9 #"let-binds"
0 0 24 3 3 #") ("
0 0 14 3 16 #"explicate-assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 7 #"c0tail^"
0 0 24 3 1 #" "
0 0 14 3 10 #"let-binds^"
0 0 24 3 3 #") ("
0 0 14 3 16 #"explicate-assign"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 6 #"c0tail"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 7 #"c0tail^"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"let-binds"
0 0 24 3 1 #" "
0 0 14 3 10 #"let-binds^"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; explicate-control : R1 -> C0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"explicate-control"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 3 #"c0t"
0 0 24 3 1 #" "
0 0 14 3 9 #"let-binds"
0 0 24 3 3 #") ("
0 0 14 3 14 #"explicate-tail"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"Program"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"locals"
0 0 24 3 1 #" "
0 0 14 3 9 #"let-binds"
0 0 24 3 2 #") "
0 0 14 3 4 #"info"
0 0 24 3 3 #") ("
0 0 14 3 3 #"CFG"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 3 #"c0t"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"given-let"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"r1program-let"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 9 #"given-let"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; todo: more testing!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; note: explicate-control passes all tests in run-tests.rkt"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; atm? : c0exp -> bool"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"atm?"
0 0 24 3 1 #" "
0 0 14 3 5 #"c0exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"c0exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; sel-ins-atm : C0atm -> pseudo-x86"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; takes in a c0 atom and converts to pseudo-x86"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sel-ins-atm"
0 0 24 3 1 #" "
0 0 14 3 3 #"c0a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"c0a"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Imm"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; sel-ins-stmt : C0stmt -> pseudo-x86"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; takes in a c0 statement and converts to pseudo-x86"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sel-ins-stmt"
0 0 24 3 1 #" "
0 0 14 3 6 #"c0stmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 6 #"c0stmt"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"Assign"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"atm?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sel-ins-atm"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Callq"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"read_int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Reg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rax"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"atm"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"x86atm"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sel-ins-atm"
0 0 24 3 1 #" "
0 0 14 3 3 #"atm"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"x86atm"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"negq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"x86atm"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"negq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 4 #"Prim"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"atm1"
0 0 24 3 1 #" "
0 0 14 3 4 #"atm2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"x86atm1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sel-ins-atm"
0 0 24 3 1 #" "
0 0 14 3 4 #"atm1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"x86atm2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sel-ins-atm"
0 0 24 3 1 #" "
0 0 14 3 4 #"atm2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 7 #"x86atm1"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"x86atm2"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 7 #"x86atm2"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"x86atm1"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"x86atm1"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"x86atm2"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 11 #")))])]))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; sel-ins-tail : C0tail -> pseudo-x86"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; takes in a c0 tail and converts it ot pseudo-x86"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sel-ins-tail"
0 0 24 3 1 #" "
0 0 14 3 3 #"c0t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"c0t"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"Return"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sel-ins-stmt"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Assign"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Reg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rax"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Jmp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"conclusion"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Seq"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 4 #"tail"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"x86stmt"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sel-ins-stmt"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"x86tail"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sel-ins-tail"
0 0 24 3 1 #" "
0 0 14 3 4 #"tail"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 7 #"x86stmt"
0 0 24 3 1 #" "
0 0 14 3 7 #"x86tail"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; select-instructions : C0 -> pseudo-x86"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"select-instructions"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 2 #" ("
0 0 14 3 3 #"CFG"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 2 #" ("
0 0 14 3 3 #"CFG"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 2 #"ls"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 4 #"]) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Block"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 12 #"sel-ins-tail"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 10 #")))))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; I think this is right..."
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; todo: check/test !"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; note: select-instructions passes all tests in run-tests.rkt"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";; /Sam"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; assign-homes : pseudo-x86 -> pseudo-x86"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"assign-homes-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Imm"
0 0 24 3 1 #" "
0 0 14 3 3 #"int"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Imm"
0 0 24 3 1 #" "
0 0 14 3 3 #"int"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Deref"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 21 3 2 #"-8"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 16 #"assign-homes-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 16 #"assign-homes-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"subq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"subq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 16 #"assign-homes-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 16 #"assign-homes-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 16 #"assign-homes-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 16 #"assign-homes-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"negq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"negq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 16 #"assign-homes-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Callq"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Callq"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Retq"
0 0 24 3 3 #") ("
0 0 14 3 4 #"Retq"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"pushq"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"pushq"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"popq"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"popq"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Jmp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Jmp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Block"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Block"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 4 #"]) ("
0 0 14 3 16 #"assign-homes-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"assign-homes"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 2 #" ("
0 0 14 3 3 #"CFG"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 2 #" ("
0 0 14 3 3 #"CFG"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 2 #"ls"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 4 #"]) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #") ("
0 0 14 3 16 #"assign-homes-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 7 #"))))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; note: assign-homes passes all tests in run-tests.rkt"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;TEST"
0 0 24 29 1 #"\n"
0 0 17 3 114
(8
 #";;(assign-homes (Program '() (CFG (list (cons 'label (Block '() (lis"
 #"t (Instr 'addq (list (Imm 10) (Imm 2))))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 115
(9
 #";;(assign-homes (Program '() (CFG (list (cons 'label (Block '() (lis"
 #"t (Instr 'addq (list (Imm 10) (Var 'v))))))))))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;  (error \"TODO: code goes here (assign-homes)\"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; Grant"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; patch-instructions : psuedo-x86 -> x86"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"patch-instructions-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Imm"
0 0 24 3 1 #" "
0 0 14 3 3 #"int"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Imm"
0 0 24 3 1 #" "
0 0 14 3 3 #"int"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Deref"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Deref"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Deref"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Deref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Reg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rax"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Reg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rax"
0 0 24 3 2 #") "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       )]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"subq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Deref"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Deref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Reg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rax"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"subq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Reg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rax"
0 0 24 3 2 #") "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"subq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       )]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Deref"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Deref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Reg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rax"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Reg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rax"
0 0 24 3 2 #") "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       )]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"negq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"negq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Callq"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Callq"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Retq"
0 0 24 3 3 #") ("
0 0 14 3 4 #"Retq"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"pushq"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"pushq"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"popq"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Instr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"popq"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"Block"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Block"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 4 #"]) ("
0 0 14 3 22 #"patch-instructions-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"patch-instructions"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 2 #" ("
0 0 14 3 3 #"CFG"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"Program"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 2 #" ("
0 0 14 3 3 #"CFG"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 2 #"ls"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 4 #"]) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #") ("
0 0 14 3 22 #"patch-instructions-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 7 #"))))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;TEST"
0 0 24 29 1 #"\n"
0 0 17 3 135
(10
 #";(patch-instructions (assign-homes (Program '() (CFG (list (cons 'la"
 #"bel (Block '() (list (Instr 'addq (list (Var 'd) (Var 'v)))))))))))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56
#";;  (error \"TODO: code goes here (patch-instructions)\"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; Grant"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; print-x86 : x86 -> string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"print-x86"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"TODO: code goes here (print-x86)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;Grant"
0 0 24 29 1 #"\n"
0           0
